七.散列表查找(哈希表)
之前的查找都是通过和值进行比较来找到的，Hash查找是通过key直接定位到它的位置来找到的。这其实是一种新的技术，叫散列技术。
1.散列技术与哈希表
	散列技术是在记录的存储位置和它的关键字之间建立一个确定的对应关系f,使得每个关键字key对应一个存储位置f(key).查找时根据key就能找到存储位置f(key).
	其中的f称为散列函数，又称为hash函数。
	采用散列技术奖记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表。
	散列技术即使一种存储方法，也是一种查找方法。它最适合的求解问题是查找与给定值相等的记录。
2.散列冲突
	当key1!=key2,但是f(key1)==f(key2),我们称为冲突。
3.散列函数的构造方法
散列函数两个原则：
	A.计算简单
	B.散列地址分布均匀
常用方法：
1）直接定址发：
	直接用key作为地址，此时f(key)=key.
	再扩展下就是f(key)=a*key+b	(a,b为常数)
	此方法虽然简单，均匀，不产生冲突，但需要事先知道关键字的分布情况，所以不怎么常用。
2)数字分析法
	抽取出数字的一部分来计算散列存储位置，适合处理关键字位置比较大的情况。
3）平方取中法
	对key平方后取中间几位。
	适合不知道关键字分布，而位数又不是很大的情况。
4）折叠法
	将关键字从左到右分割成位数相等的几部分，然后将这几部分叠加求和，并按散列表表中取后几位作为散列地址。
	折叠法不需要知道关键字分布，适合关键字位数较多的情况。
5) 除留余数法
假设散列表长为m,散列函数公式如下：
	f(key) = key mod p(p<=m)
通常p为小于或等于表长的最小质数或不包含小于20质因子的合数。
6) 随机数法
	f(key) = random(key)
当关键字的长度不等时，可以用这种方法。

通常散列函数需要考虑下面几点：
	1）计算所需要时间
	2）关键字长度
	3）散列表的大小
	4）关键字的分布情况
	5）记录查找的频率














































