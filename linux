当 UID 是 0 时，代表这个账号是『系统管理员』,1~499保留给系统使用的 ID，500~65535给一般使用者用的。事实上，目前的 linux 核心 (2.6.x 版)已经可以支持到 4294967295 (2^32-1) 这么大的 UID 号码
信号SIGPIPE:
当进程将数据写入一个已经被关闭的管道是将会收到SIGPIPE信号，默认情况下会使进程关闭。
对应于网络连接，当服务器close一个连接时，若client端接着发数据。根据TCP协议的 规定，会收到一个RST响应，client再往这个服务器发送数据时，系统会发出一个SIGPIPE信号给进程，告诉进程这个连接已经断开了，不要再写 了。
在linux下写socket的程序的时候，如果尝试send到一个disconnected socket上，就会让底层抛出一个SIGPIPE信号。

根据信号的默认处理规则SIGPIPE信号的默认执行动作是terminate(终止、退出),所以client会退出。若不想客户端退出可以把 SIGPIPE设为SIG_IGN


2.EOF
	EOF是 End Of File 的缩写。在C语言中，它是在标准库中定义的一个宏。一般定义为-1.
	Windows下为组合键Ctrl+Z，Unix/Linux下为组合键Ctrl+D.
对于getchar(),返回 EOF 无非是出现了两种情况,一是文件已经读完; 二是文件读取出错,反正是读不下去了.
	int c = -1;
	while((c=getchar())!=EOF){
		putchar(c);
	}

	char默认为无符号的，而EOF一般为-1,所以getchar返回值为int,不是char.
	对于getchar,当终端有字符输入时，Ctrl+D产生的EOF相当于结束本行的输入，将引起getchar()新一轮的输入；当终端没有字符输入或者可以说当getchar()读取新的一次输入时，输入Ctrl+D，此时产生的EOF相当于文件结束符，程序将结束getchar()的执行。

硬链接与软链接
1)硬链接就是同一个文件使用了多个别名（他们有共同的 inode）。
特征：
	* 文件有相同的 inode 及 data block；
	* 只能对已存在的文件进行创建；
	* 不能交叉文件系统进行硬链接的创建；
	* 不能对目录进行创建，只可对文件创建；
	* 删除一个硬链接文件并不影响其他有相同 inode 号的文件。
硬链接可由命令 link 或 ln 创建，如：
	link oldfile newfile 
	ln oldfile newfile
由于硬链接是有着相同 inode 号仅文件名不同的文件，因此，删除一个硬链接文件并不影响其他有相同 inode 号的文件。
硬链接不能对目录进行创建，只可对文件创建。

2)软链接（也叫符号链接）与硬链接不同，文件用户数据块中存放的内容是另一文件的路径名的指向。软链接就是一个普通文件，只是数据块内容有点特殊。
	ln -s old.file soft.link
	ln -s old.dir soft.link.dir
	加-s选项表示创建的是软链接。
特征：
	* 软链接有自己的文件属性及权限等；
	* 可对不存在的文件或目录创建软链接；
	* 软链接可交叉文件系统；
	* 软链接可对文件或目录创建；
	* 创建软链接时，链接计数 i_nlink 不会增加；
	* 删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）。



信号的发送和捕捉函数
1)alarm()
	用来设置信号SIGALRM在经过参数seconds指定的秒数后传送给目前的进程。
2)kill()
	是将信号发送给指定的pid进程。普通用户利用kill函数将信号发送给该用户下任意一个进程，而特权用户(root)可以将信号发送系统中的任意一个进程。
3)kill()
	与kill函数不同的是，raise函数运行是向进程自身发送信号。
4)sleep()
	会令目前的进程暂停，直到达到参数seconds所指定的时间，或是被信号所中断
5)abort()
	将SIGABRT信号给调用进程，此信号将引起调用进程的异常终止。此时所有已打开的文件流会自动关闭，所有的缓冲区数据会自动写回。


Linux守护服务进程（Daemon service）
守护服务进程指的是在后台运行，起到提供服务的进程。
将进程放入后台方法：
	这里利用了fork为当前进程创建一份拷贝（即子进程），然后令父进程退出后子进程被init进程（系统初始化进程，是所有进程的父进程）接管时会将进程放入后台这个特点。
	i=fork();
	if (i<0) exit(1); /* fork error */
	if (i>0) exit(0); /* parent exits */
	/* child (daemon) continues */
	。。。

文件锁
在linux中对文件进行锁操作，可以使用lockf()和fcntl()这两个函数，前者对文件施加建议性锁，后者为两种锁都行。
文件锁包括建议性锁和强制性的锁。强制性的锁是由内核执行的锁，当一个文件被上锁进行写入操作的时候，内核将阻止其他进程对其进行读写操作。


	条件变量是利用线程间共享的全局变量进行同步的一种机制，主要包括两个动作：一个线程等待"条件变量的条件成立"而挂起；另一个线程使"条件成立"（给出条件成立信号）。为了防止竞争，条件变量的使用总是和一个互斥锁结合在一起。 
	基本思路与Java的condition/object.wait,notify是类似的。
对应函数：
	pthread_cond_init
	pthread_cond_destroy
	pthread_cond_wait
	pthread_cond_singal


	管道是Linux中很重要的一种通信方式,是把一个程序的输出直接连接到另一个程序的输入,常说的管道多是指无名管道,无名管道只能用于具有亲缘关系的进程之间，这是它与有名管道的最大区别。 
	有名管道叫named pipe或者FIFO(先进先出)，可以用函数mkfifo()创建。 
	管道是一个固定大小的缓冲区。在Linux中，该缓冲区的大小为1页，即4K字节
Demo:
	int n,fd[2]; // 这里的fd是文件描述符的数组，用于创建管道做准备的 
	pid_t pid; 
	char line[100]; 
	if(pipe(fd)<0) // 创建管道 
	  printf("pipe create error/n"); 
	if((pid=fork())<0) //利用fork()创建新进程 
	  printf("fork error/n"); 
	else if(pid>0){ //这里是父进程，先关闭管道的读出端，然后在管道的写端写入“hello world" 
	  close(fd[0]); 
	  write(fd[1],"hello word/n",11); 
	} 
	else{ 
	  close(fd[1]); //这里是子进程，先关闭管道的写入端，然后在管道的读出端读出数据 
	  n= read(fd[0],line,100); 
	  write(STDOUT_FILENO,line,n); 
	} 


exit()
	关闭所有文件，终止正在执行的进程。
	exit(1)表示异常退出.这个1是返回给操作系统的。
	exit(x)（x不为0）都表示异常退出
	exit(0)表示正常退出
