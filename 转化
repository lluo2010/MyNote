

map
返回一个新的Observable,将之前发送的值应用到Func1上,新Observable发送Func1的返回值.
	public final <R> Observable<R> map(Func1<? super T,? extends R> func)
Returns an Observable that applies a specified function to each item emitted by the source Observable and emits the results of these function applications.


flatmap
flatMap操作符是把Observable产生的结果转换成多个Observable,然后又直接把这些多个Observable转换单一一个Observable,并依次提交产生的结果给订阅者.
有好几个重载的,最常见是下面这一个:
    public final <R> Observable<R> flatMap(Func1<? super T, ? extends Observable<? extends R>> func);

 也就是在原有的Observable上,一个参数值,可以产生一到多个新的Observable,每一个Observable会产生一到多个新的Observable,最后把这些Observable产生的结果依次提交给订阅者.
例子:
    private void flatMap() {  
        Observable.just(getApplicationContext().getExternalCacheDir()).flatMap(new Func1<File, Observable<File>>() {  
            @Override  
            public Observable<File> call(File file) {  
                return listFiles(file);  
            }  
        }).subscribe(new Action1<File>() {  
            @Override  
            public void call(File file) {  
                LogUtils.d("------>:" + file.getAbsolutePath());  
            }  
        });  
    }  
  
    private Observable<File> listFiles(File f) {  
        if (f.isDirectory()) {  
            return Observable.from(f.listFiles()).flatMap(new Func1<File, Observable<File>>() {  
                @Override  
                public Observable<File> call(File file) {  
                    return listFiles(file);  
                }  
            });  
        } else {  
            return Observable.just(f);  
        }  
    } 

xxxmap



这种情况下调用onNext最后会把onComplete带上的.




Observable<T>   doOnCompleted(Action0 onCompleted)
Modifies the source Observable so that it invokes an action when it calls onCompleted.
Observable<T>   doOnEach(Action1<Notification<? super T>> onNotification)
Modifies the source Observable so that it invokes an action for each item it emits.
Observable<T>   doOnEach(Observer<? super T> observer)
Modifies the source Observable so that it notifies an Observer for each item and terminal event it emits.
Observable<T>   doOnError(Action1<java.lang.Throwable> onError)
Modifies the source Observable so that it invokes an action if it calls onError.
Observable<T>   doOnNext(Action1<? super T> onNext)
Modifies the source Observable so that it invokes an action when it calls onNext.
Observable<T>   doOnRequest(Action1<java.lang.Long> onRequest)
Modifies the source Observable so that it invokes the given action when it receives a request for more items.
Observable<T>   doOnSubscribe(Action0 subscribe)
Modifies the source Observable so that it invokes the given action when it is subscribed from its subscribers.
Observable<T>   doOnTerminate(Action0 onTerminate)
Modifies the source Observable so that it invokes an action when it calls onCompleted or onError.
Observable<T>   doOnUnsubscribe(Action0 unsubscribe)
Calls the unsubscribe Action0 if the downstream unsubscribes the sequence.