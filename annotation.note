Java Annotation注解 note

一. 概念及原理
	Annontation是Java5开始引入的新特征。中文名称一般叫注解。它提供了一种安全的类似注释的机制，用来将任何的信息或元数据（metadata）与程序元素（类、方法、成员变量等）进行关联。
	 Annotation 提供了一条与程序元素关联任何信息或者任何元数据（ metadata ）的途径。从某些方面看， annotation 就像修饰符一样被使用，并应用于包、类型、构造方法、方法、成 员变量、参数、本地变量的声明中。这些信息被存储在 annotation 的 “name=value” 结构对中。 annotation 类型是一种接 口，能够通过 java 反射 API 的方式提供对其信息的访问。
　　更通俗的意思是为程序的元素（类、方法、成员变量）加上更直观更明了的说明，这些说明信息是与程序的业务逻辑无关，并且是供指定的工具或框架使用的。
Annontation像一种修饰符一样，应用于包、类型、构造方法、方法、成员变量、参数及本地变量的声明语句中。
	annotation 能被用来为某个程序元素（类、方法、成员变量等）关联任何的信 息。需要注意的是，这里存在着一个基本的潜规则： annotaion 不能影响程序代码的执行，无论增加、删除 annotation ，代码都始终如一的执行。另外，尽管一些 annotation 通 过 java 的反射 api 方法在运行时被访问，而 java 语言解释器在工作时忽略了这些 annotation 。正是由于 java 虚拟机忽略了 annotation ，导致了 annotation 类型在代码中是 “ 不起作用 ” 的；只有通过某种配套的工具才会对 annotation 类型中的信息进行访问和处理。
	Annotation其实是一种接口。通过Java的反射机制相关的API来访问annotation信息。相关类（框架或工具中的类）根据这些信息来决定如何使用该程序元素或改变它们的行为。
　　annotation是不会影响程序代码的执行，无论annotation怎么变化，代码都始终如一地执行。
	Java语言解释器在工作时会忽略这些annotation，因此在JVM中这些annotation是“不起作用”的，只能通过配套的工具才能对这些annontaion类型的信息进行访问和处理。
	annotation 是与一个程序元素相关联信息或者元数据的标注。它从不影响Java 程序的执行，但是对例如编译器警告或者像文档生成器等辅助工具产 生影响。
     我的理解是： Annotation 是继承自 java.lang.annotation.Annotation 的类，用于向程序分析工具或虚拟机提供 package class field methed 等方面的信息，它和其他类没什么区别 , 除了使用方式。 

Annotation与interface的异同：
	1）Annotation类型使用关键字@interface而不是interface。
　　这个关键字声明隐含了一个信息：它是继承了java.lang.annotation.Annotation接口，并非声明了一个interface
	2）Annotation类型、方法定义是独特的、受限制的。
　　Annotation 类型的方法必须声明为无参数、无异常抛出的。这些方法定义了annotation的成员：方法名成为了成员名，而方法返回值成为了成员的类型。而方法返回值类型必须为primitive类型、Class类型、枚举类型、annotation类型或者由前面类型之一作为元素的一维数组。方法的后面可以使用 default和一个默认数值来声明成员的默认值，null不能作为成员默认值，这与我们在非annotation类型中定义方法有很大不同。
　　Annotation类型和它的方法不能使用annotation类型的参数、成员不能是generic。只有返回值类型是Class的方法可以在annotation类型中使用generic，因为此方法能够用类转换将各种类型转换为Class。
	3）Annotation类型又与接口有着近似之处。
　　它们可以定义常量、静态成员类型（比如枚举类型定义）。Annotation类型也可以如接口一般被实现或者继承。
二.应用场合
	annotation一般作为一种辅助途径，应用在软件框架或工具中，在这些工具类中根据不同的 annontation注解信息采取不同的处理过程或改变相应程序元素（类、方法及成员变量等）的行为。
　　例如：Junit、Struts、Spring等流行工具框架中均广泛使用了annontion。使代码的灵活性大提高。

...
...

十. Reference:
1.Java 反射机制及Annotation
	http://justjavac.iteye.com/blog/714654
2.Java基础之理解Annotation
	http://www.cnblogs.com/mandroid/archive/2011/07/18/2109829.html



基本的Annotation

JDK的元Annotation
包括@Target,@Retention,@Documented,@Inherited。

1.@Target：
	@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。
　　作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）
　　取值(ElementType)有：
　　　　A.CONSTRUCTOR:用于描述构造器
　　　　B.FIELD:用于描述域
　　　　C.LOCAL_VARIABLE:用于描述局部变量
　　　　D.METHOD:用于描述方法
　　　　E.PACKAGE:用于描述包
　　　　F.PARAMETER:用于描述参数
　　　　G.TYPE:用于描述类、接口(包括注解类型) 或enum声明
例子：
	@Target(ElementType.TYPE)
	public @interface Table {
		/**
		 * 数据表名称注解，默认值为类名称
		 * @return
		 */
		public String tableName() default "className";
	}

	@Target(ElementType.FIELD)
	public @interface NoDBColumn {

	}
注解Table 可以用于注解类、接口(包括注解类型) 或enum声明,而注解NoDBColumn仅可用于注解类的成员变量。

2.@Retention：
	@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。
	作用：表示需要在什么级别保存该注释信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效）
	取值（RetentionPoicy）有：
		A.SOURCE:在源文件中有效（即源文件保留）
		B.CLASS:在class文件中有效（即class保留）
		C.RUNTIME:在运行时有效（即运行时保留）
	Retention meta-annotation类型有唯一的value作为成员，它的取值来自java.lang.annotation.RetentionPolicy的枚举类型值。
例子：
	@Target(ElementType.FIELD)
	@Retention(RetentionPolicy.RUNTIME)
	public @interface Column {
		public String name() default "fieldName";
		public String setFuncName() default "setField";
		public String getFuncName() default "getField"; 
		public boolean defaultDBValue() default false;
	}


3.@Documented:
	@Documented用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。
例子：
	@Target(ElementType.FIELD)
	@Retention(RetentionPolicy.RUNTIME)
	@Documented
	public @interface Column {
		public String name() default "fieldName";
		public String setFuncName() default "setField";
		public String getFuncName() default "getField"; 
		public boolean defaultDBValue() default false;
	}

4.@Inherited：
	@Inherited 元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。
　　注意：@Inherited annotation类型是被标注过的class的子类所继承。类并不从它所实现的接口继承annotation，方法并不从它所重载的方法继承annotation。
　　当@Inherited annotation类型标注的annotation的Retention是RetentionPolicy.RUNTIME，则反射API增强了这种继承性。如果我们使用java.lang.reflect去查询一个@Inherited annotation类型的annotation时，反射代码检查将展开工作：检查class和其父类，直到发现指定的annotation类型被发现，或者到达类继承结构的顶层。
例子：
	/**
	 * 
	 * @author peida
	 *
	 */
	@Inherited
	public @interface Greeting {
		public enum FontColor{ BULE,RED,GREEN};
		String name();
		FontColor fontColor() default FontColor.GREEN;
	}
