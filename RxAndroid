# RxAndroid note


## x







## 线程控制
这里的线程控制是指订阅时的subscribe()里的动作在哪里执行,观察者Observer的onNext触发行为在哪里执行.

在不指定线程的情况下， RxJava 遵循的是线程不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到Scheduler（调度器）。
在RxJava 中，Scheduler ——调度器，相当于线程控制器，RxJava 通过它来指定每一段代码应该运行在什么样的线程。
Schedulers决定了Observables在哪个线程发射他们的异步数据流，也决定了Observers在哪个线程消费这些数据流。
## 几种调度
RxJava 已经内置了几个 Scheduler ，它们已经适合大多数的使用场景：

- Schedulers.immediate()
    直接在当前线程运行，相当于不指定线程。这是默认的Scheduler。
- Schedulers.newThread()
    总是启用新线程，并在新线程执行操作。
- Schedulers.io()
    I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。
- Schedulers.computation()
    计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。
- Schedulers.from(executor)
    使用指定的Executor作为调度器
- Schedulers.trampoline()
    当其它排队的任务完成后，在当前线程排队开始执行
- Android 还有一个专用的 AndroidSchedulers.mainThread()
    它指定的操作将在 Android 主线程运行。

## subscribeOn() & observeOn()
有了这几个Scheduler，就可以使用subscribeOn()和observeOn()两个方法来对线程进行控制了。

- subscribeOn()
    指定subscribe()所发生的线程，即Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。
- observeOn()
    指定Subscriber所运行的线程。或者叫做事件消费的线程。

例:

```
    Observable.just(1, 2, 3, 4)
        .subscribeOn(Schedulers.io()) // 指定 subscribe() 发生在 IO 线程
        .observeOn(AndroidSchedulers.mainThread()) // 指定 Subscriber 的回调发生在主线程
        .subscribe(new Action1() {
            @Override
            public void call(Integer number) {
                Log.d(tag, "number:" + number);
            }
        });
```

上面创建的事件的内容 1、2、3、4 将会在IO线程发出,subscriber数字的打印将发生在UI主线程中进行.

如果都没指定，在单一线程执行，如果单单指定subscribeOn(即执行动作产生数据的线程)，那消费数据的线程同产生数据线程。其实只要不指定observeOn,消费数据线程都与产生数据线程相同。



Observers可以消费由Observables发射出的异步数据流。可以有多个Observers注册去接收由Observable发射的数据。Observers能处理任何可能发生在Observable发射数据时的异常，Observers也知道什么时候结束。



## RxJava and Activity Lifecycle

Android framework要求任何有效的异步数据加载解决方案需要有两个属性:

- 首先，它必须能通知Activity完成数据加载操作不会导致Activity的泄漏。
- 其次，如果仅仅是配置的改变，它不应该强制要求开发者重新查询数据源。


为了避免泄露Activity,我们必须确保异步数据加载操作完成时通知Activity的对象不能:

- 存活的比Activity时间长
- 持有Activity的强引用
如果这两个条件都满足，那么加载数据的对象可能会导致Activity的泄露。

### 解决重复查询(Avoiding Re-querying for Data Upon Configuration Changes)
用RxJava解决重复查询的问题至少有两种方法:

1. 第一种方法，我们创建Observables并用Loader类取异步数据。这是在我的TDD-based HackerNews client中用到的的方法。
1. 第二种解决重复查询问题的方法是:
	- 确保Observables幸免于配置的改变
	- 使用cache或者replay操作符让这些Observables给未来的Observers发射相同的数据


#### 

## 技巧

1. 在后台执行,在UI呈现(Observing on the main thread)
使用AndroidSchedulers.mainThread()

	```
	Observable.just("one", "two", "three", "four", "five")
    	      .subscribeOn(Schedulers.newThread())
        	  .observeOn(AndroidSchedulers.mainThread())
        	  .subscribe(/* an Observer */);
```

2. 在指定loop中观察到结果(Observing on arbitrary loopers)
使用AndroidSchedulers.from

	```
	Looper backgroundLooper = // ...
	Observable.just("one", "two", "three", "four", "five")
    	      .observeOn(AndroidSchedulers.from(backgroundLooper))
              .subscribe(/* an Observer */)
```









## Reference
- [RxAndrid github](https://github.com/ReactiveX/RxAndroid)
- [有什么使用了RxJava或RxAndroid的开源项目？](http://www.zhihu.com/question/35511144)
- [给 Android 开发者的 RxJava 详解](http://gank.io/post/560e15be2dca930e00da1083)
- [在安卓上使用RxJava](http://www.importnew.com/8321.html)


- [RxJava的Android开发之路 RxJava入门(一)](http://huxian99.github.io/2015/10/24/RxJava%E7%9A%84Android%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-RxJava%E5%85%A5%E9%97%A8-%E4%B8%80/)
- [RxJava的Android开发之路 RxJava实战 (二)](http://huxian99.github.io/2015/10/28/RxJava%E7%9A%84Android%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-RxJava%E5%AE%9E%E6%88%98-%E4%BA%8C/)
- [RxJava的Android开发之路 RxJava未来(三)](http://huxian99.github.io/2015/10/29/RxJava%E7%9A%84Android%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-RxJava%E6%9C%AA%E6%9D%A5-%E4%B8%89/)

- [从案例学RxAndroid开发（上）](http://www.infoq.com/cn/articles/RxAndroid-basics)
- [从案例学RxAndroid开发（下）](http://www.infoq.com/cn/articles/rxandroid-basics-2?utm_campaign=rightbar_v2&utm_source=infoq&utm_medium=articles_link&utm_content=link_text)

- [深入浅出RxJava四-在Android中使用响应式编程](http://blog.csdn.net/lzyzsd/article/details/45033611/)



- [RxAndroid Basics: Part 1](https://medium.com/@kurtisnusbaum/rxandroid-basics-part-1-c0d5edcf6850#.ihwquwn3h)
- [RxAndroid Basics: Part 2](https://medium.com/@kurtisnusbaum/rxandroid-basics-part-2-6e877af352#.igup6ohs0)


- [Learning RxJava With Android by Example](http://nerds.weddingpartyapp.com/tech/2014/09/15/learning-rxjava-with-android-by-example/)

- [Grokking RxJava, Part 1: The Basics](http://blog.danlew.net/2014/09/15/grokking-rxjava-part-1/)
- [Grokking RxJava, Part 2: Operator, Operator](http://blog.danlew.net/2014/09/22/grokking-rxjava-part-2/)
- [Grokking RxJava, Part 3: Reactive with Benefits](http://blog.danlew.net/2014/09/30/grokking-rxjava-part-3/)
- [Grokking RxJava, Part 4: Reactive Android](http://blog.danlew.net/2014/10/08/grokking-rxjava-part-4/)



- [RxJava & RxAndroid备忘](http://www.tuicool.com/articles/Ubiqmy6)
- [RxAndroid使用方法](http://blog.csdn.net/caroline_wendy/article/details/50444461)
- [可能是东半球最全的RxJava使用场景小结](http://blog.csdn.net/theone10211024/article/details/50435325)








debounce


