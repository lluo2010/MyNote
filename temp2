## 常用对象及接口

### Call<T>
Interface Call<T>

An invocation of a Retrofit method that sends a request to a webserver and returns a response. Each call yields its own HTTP request and response pair. Use clone() to make multiple calls with the same parameters to the same webserver; this may be used to implement polling or to retry a failed call.

Calls may be executed synchronously with execute(), or asynchronously with enqueue(retrofit2.Callback<T>). In either case the call can be canceled at any time with cancel().

调用请求方法返回的(对应的)一个方法对应的invocation.

采用execute发起同步请求,enqueue发起异步请求. cancel()方法可以取消请求. request()方法原来的HttpRequest.

*** 如果需要再次发送请求,不能再次直接调用execute或者enqueue, 需要先调用clone(). ***


主要方法:

Modifier and Type|Method and Description
:---|:--
void	enqueue(Callback<T> callback)| Asynchronously send the request and notify callback of its response or if an error occurred talking to the server, creating the request, or processing the response.
Response<T>	execute()| Synchronously send the request and return its response.
Call<T>	clone()| Create a new, identical call to this one which can be enqueued or executed even if this call has already been.
void	cancel()|Cancel this call.
boolean	isCanceled()| True if cancel() was called.
boolean	isExecuted()| Returns true if this call has been either executed or enqueued.
okhttp3.Request	request()| The original HTTP request.


### Callback<T>
public interface Callback<T>

Communicates responses from a server or offline requests. One and only one method will be invoked in response to a given request.

Callback methods are executed using the Retrofit callback executor. When none is specified, the following defaults are used:

- Android: Callbacks are executed on the application's main (UI) thread.
- JVM: Callbacks are executed on the background thread which performed the request.

请求的返回接口, 包含onFailure和onResponse两个方法,每次只有一个方法会被调用:

- void    onResponse(Call<T> call, Response<T> response): Invoked for a received HTTP response.An HTTP response may still indicate an application-level failure such as a 404 or 500. *** 也就是说, 像http不为200的情况也是调用该方法的. ***

- void    onFailure(Call<T> call, Throwable t):  Invoked when a network exception occurred talking to the server or when an unexpected exception occurred creating the request or processing the response. *** 主要是网络原因导致的失败 ***

对于android来说,方法在UI线程中调用,对于一般的JVM,在请求发起的线程中调用.


## okHttp常用对象及接口

### Request
public final class Request extends Object

An HTTP request. Instances of this class are immutable if their body is null or itself immutable.

表示http的一个请求,包含了body(),headers(),method(),header(String),isHttps(), url()等如下方法:

Modifier and Type|Method and Description
--|:--
RequestBody|body() 
CacheControl	|cacheControl()  Returns the cache control directives for this response.
String	| header(String name) 
Headers	| headers()
List<String>|headers(String name) 
boolean|isHttps() 
String|method() 
Request.Builder|newBuilder() 
Object|tag() 
String|toString() 
HttpUrl|url() 


### RequestBody

public abstract class RequestBody extends Object

表示请求的body,包含了contentLength(),contentType()函数,一个writeTo(x)方法以及几个创建RequestBody的静态方法create(...).


### Response

public final class Response extends Object implements Closeable

An HTTP response. Instances of this class are not immutable: the response body is a one-shot value that may be consumed only once and then closed. All other properties are immutable.

This class implements Closeable. Closing it simply closes its response body.

表示一个request返回的response. 

提供了诸如body(),code()(返回码),header(),headers(),protocol()等表示http response的函数.

### ResponseBody

public abstract class ResponseBody extends Object implements Closeable

A one-shot stream from the origin server to the client application with the raw bytes of the response body. Each response body is supported by an active connection to the webserver. This imposes both obligations and limits on the client application.

Both this class and Response implement Closeable. Closing a response simply closes its response body. If you invoke Call.execute() or implement Callback.onResponse(okhttp3.Call, okhttp3.Response) you must close this body by calling any of the following methods:

- Response.close()
- Response.body().close()
- Response.body().source().close()
- Response.body().charStream().close()
- Response.body().byteString().close()
- Response.body().bytes()
- Response.body().string()

表示请求返回的response的body,包含了bytes(),byteStream(),charStream(),string(),contentLength()等返回body内容的方法, close()方法以及其他用于创建ResponseBody的静态方法.

Return type|Method|Description
:--|:--|:--
byte[]|bytes() |以字节码形式方法body
String|string()|Returns the response as a string decoded with the charset of the Content-Type header.以string形式返回body.
InputStream|byteStream()|以InputStream形式返回body.
Reader|charStream()|Returns the response as a character stream decoded with the charset of the Content-Type header.以Reader(字符流)形式返回body


### Interface Converter<F,T>

public interface Converter<F,T>

Convert objects to and from their representation in HTTP. Instances are created by a factory which is installed into the Retrofit instance.

将某种类型对象转入RequestBody,或者将ResponseBody转化为某类对象. 用到的工厂是在Retrofit创建时指定的.

该接口包含一个Factory抽象工厂类和一个Convert方法,具体如下:
  
```
public interface Converter<F, T> {
  T convert(F value) throws IOException;

  abstract class Factory {
    public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
        Retrofit retrofit) {
      return null;
    }

    public Converter<?, RequestBody> requestBodyConverter(Type type,
        Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
      return null;
    }

    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,
        Retrofit retrofit) {
      return null;
    }
  }
}
```

### Converter.Factory

public abstract static class Converter.Factory extends Object

Creates Converter instances based on a type and target usage.

接口Converter中的抽象类, 用来产生Converter进行转化.

代码如下:

```
abstract class Factory {
    
    public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
        Retrofit retrofit) {
      return null;
    }

    public Converter<?, RequestBody> requestBodyConverter(Type type,
        Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
      return null;
    }

    public Converter<?, String> stringConverter(Type type, Annotation[] annotations,
        Retrofit retrofit) {
      return null;
    }
  }
```
其中的方法:

方法|作用
--|--
responseBodyConverter|产生Converter,用来将ResponseBody转化为指定的类型
requestBodyConverter|产生Converrter,用来将指定类型转化为RequestBody.
stringConverter|产生Converrter,用来将指定类型转化为string,This is used to create converters for types specified by @Field, @FieldMap values, @Header, @HeaderMap, @Path, @Query, and @QueryMap values.

*** 方法返回null表示不处理 ***


### HttpUrl

xxx

